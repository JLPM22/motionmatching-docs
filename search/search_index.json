{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Motion Matching for Unity","text":"<p>Welcome to the Motion Matching implementation designed for the Unity game engine. This project originated from the author's master thesis, providing a deep dive into both the Motion Matching technique and the workings of this specific Unity package. Download the complete thesis here for an extensive overview. The project is a work-in-progress, aiming to offer a comprehensive Motion Matching solution for Unity. It can serve as a useful resource for those keen to learn or implement their own Motion Matching solution or even extend this existing package.</p> <p> </p> Project Architecture. The two core components are the Motion Matching Controller (in red) and the Character Controllers (in green). Components with dashed outlines are not yet implemented."},{"location":"#citation","title":"Citation","text":"<p>If you find this package beneficial, kindly attribute it to this repository or cite the author's master thesis using the following citation:</p> <pre><code>@mastersthesis{ponton2022mm,\n  author  = {Ponton, Jose Luis},\n  title   = {Motion Matching for Character Animation and Virtual Reality Avatars in Unity},\n  school  = {Universitat Politecnica de Catalunya},\n  year    = {2022},\n  doi     = {10.13140/RG.2.2.31741.23528/1}\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is distributed under the MIT License. For complete license details, refer to the LICENSE file.</p>"},{"location":"quick_start/","title":"Quick Start Guide","text":"<p>Follow these steps to get started with the Motion Matching package for Unity.</p>"},{"location":"quick_start/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Ensure you have Unity 6+ installed (untested on other versions).</p> </li> <li> <p>Open the Unity Editor and navigate to Window &gt; Package Manager.</p> </li> <li> <p>In the Package Manager, click Add (+) &gt; Add package by git URL....</p> </li> <li> <p>Insert the following URL into the git URL field and click Add:     <pre><code>https://github.com/JLPM22/MotionMatching.git?path=/com.jlpm.motionmatching\n</code></pre></p> <p>Warning</p> <p>Note: All sample scenes use the Universal Render Pipeline (URP). Conversion may be necessary if you are using a different render pipeline.</p> </li> <li> <p>[Optional] In the Package Manager, click on Motion Matching, then import the example scenes by selecting Samples &gt; Examples &gt; Import.</p> </li> <li> <p>[Optional] Go to <code>Samples/Motion Matching/[version]/Examples/Scenes/</code> in the Project Window to explore the sample scenes.</p> </li> </ol>"},{"location":"quick_start/#project-overview","title":"Project Overview","text":""},{"location":"quick_start/#directories","title":"Directories","text":"<ul> <li> <p><code>Samples/Animations</code>: Contains motion capture (MoCap) files (with .txt extensions but originally .bvh files) and MMData files to define the animation database for the Motion Matching System.</p> </li> <li> <p><code>StreamingAssets/MMDatabases</code>: Contains the processed pose and feature databases, as well as skeletal information. This directory is automatically created when generating databases from an MMData file.</p> </li> </ul>"},{"location":"quick_start/#key-components","title":"Key Components","text":"<p>Demo scenes consist of two primary GameObjects:</p> <ol> <li> <p>Character Controller: Creates trajectories and imposes positional constraints, like limiting the maximum distance between the simulated and animated character positions.</p> </li> <li> <p>MotionMatchingController: Handles all Motion Matching operations. It provides adjustable parameters for enabling/disabling features like inertialize blending or foot locking.</p> </li> </ol> <p>Feel free to tweak and explore these components to get a better understanding of the system.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Here's a list of upcoming features and improvements to enhance the capabilities and usability of the Motion Matching package for Unity:</p>"},{"location":"roadmap/#planned-features","title":"Planned Features","text":"<ul> <li> <p> Enhanced Documentation: Work on a more comprehensive guide explaining the intricacies of Motion Matching. For now, you can refer to the author's master thesis.</p> </li> <li> <p> Pose Feature Customization: Expand the types of pose features available.</p> </li> <li> <p> Motion Capture Library: Record additional motion capture data and create default avatars for immediate use in projects.</p> </li> <li> <p> Visual Debugging Tools: Develop a suite of visual debugging tools for easier inspection and adjustment during development. Additionally, visualization of databases.</p> </li> <li> <p> Memory Optimization with Deep Learning: Investigate the use of deep learning algorithms to reduce memory usage in the system.</p> </li> <li> <p> Unity 6 DOTS version: Create a version of the package that utilizes Unity's Data-Oriented Technology Stack (DOTS) for improved performance.</p> </li> <li> <p> Inverse Kinematics Integration: Integrate inverse kinematics (IK) for more realistic character interactions.</p> </li> <li> <p> Event System: Implement an event system for triggering actions based on specific conditions in the animation.</p> </li> <li> <p> Networked Motion Matching: Develop a networked version of Motion Matching for multiplayer games.</p> </li> </ul>"},{"location":"roadmap/#completed-features","title":"Completed Features","text":"<ul> <li> <p> BVH Editor with Tagging: Introduced a BVH editor that supports real-time complex tag queries.</p> </li> <li> <p> Unity Animation System Integration: Added tools and methods for seamless integration with Unity's native animation system. This allows, for example, the use of Unity's animation system for the upper body while utilizing Motion Matching for the lower body.</p> </li> <li> <p> Unity Package Structure: Successfully restructured the project into a Unity package for easier distribution and integration.</p> </li> <li> <p> Trajectory Customization: Implement a more user-friendly system for modifying trajectory features.</p> </li> <li> <p> PathCharacterController Upgrades: Revise the current hardcoded path tools in favor of a more flexible system, possibly using splines or other advanced techniques.</p> </li> </ul> <p>Your contributions and suggestions are always welcome as we continue to develop this project into a comprehensive Motion Matching solution for Unity.</p>"},{"location":"advanced/custom_features/","title":"Custom Trajectory Features","text":"<p>This package provides an advanced mechanism to extend the trajectory features used by Motion Matching, enabling you to incorporate custom data like the positions of other agents or objects.</p>"},{"location":"advanced/custom_features/#overview","title":"Overview","text":"<p>Within the <code>MotionMatchingData</code> scriptable object, you can select one of four custom trajectory feature types: <code>Custom 1D</code>, <code>Custom 2D</code>, <code>Custom 3D</code>, or <code>Custom 4D</code>.  These options define the dimensionality of the feature vector for each point in the trajectory.</p> <p>Example</p> <p>The default position trajectory feature could be implemented as a <code>Custom 2D</code> feature. Although a trajectory consists of multiple points (the number of points is specified in the <code>Frames Prediction</code> setting), each point is represented by a 2D position on the ground plane (X and Z coordinates).  Other examples include using <code>Custom 1D</code> to represent agent density at future points or <code>Custom 2D</code> to represent the position of the closest agent at each point in the trajectory.</p> <p> </p> Feature Selector in a `MotionMatchingData` scriptable object. Select a custom type to define your trajectory features."},{"location":"advanced/custom_features/#creating-a-custom-feature","title":"Creating a Custom Feature","text":"<p>Example</p> <p>See the example script at <code>Examples/Scripts/Custom/Custom2DFeatureExtractor.cs</code>.</p> <p>To create a new custom feature:</p> <ol> <li> <p>Create a new C# script that inherits from <code>Feature1DExtractor</code>, <code>Feature2DExtractor</code>, <code>Feature3DExtractor</code>, or <code>Feature4DExtractor</code>, depending on the desired dimensionality of your feature vector.</p> </li> <li> <p>Override and implement the abstract functions.</p> <p>Important</p> <p>All features in Motion Matching must be relative to the character's local space. Ensure you convert features to character space before returning them from the <code>ExtractFeature()</code> function.</p> </li> <li> <p>Add the <code>CreateAssetMenu</code> attribute before the class declaration. This allows you to create instances of your custom feature scriptable object in the Unity Editor. For example, <code>[CreateAssetMenu(fileName = \"NewCustom2DFeatureExtractor\", menuName = \"Custom/Custom2DFeatureExtractor\")]</code>.</p> <p>Tip</p> <p>Using scriptable objects for custom extractors is very useful for incorporating external data. For example, you might need to access external files to compute certain features. You can define public fields in your custom extractor class, which can then be assigned in the Unity Editor when you create an instance of the scriptable object.</p> </li> <li> <p>Create an instance of your scriptable object via the editor (right-click in your project window -&gt; Create -&gt; [Your Custom Feature Type]) and assign it to the <code>MotionMatchingData</code> asset.</p> </li> </ol> <p>The following figure illustrates an example implementation:</p> <p> </p> The `ExtractFeature()` function, called for each pose in the pose database. This example projects the head position onto the ground plane. <p>This function is the core of feature extraction. It's called for every frame in your pose database.  In the example, the <code>GetWorldPosition()</code> helper function retrieves the world-space position of the head joint for the current pose.  Then, <code>GetLocalPositionFromCharacter()</code> converts this world-space position into the character's local space. Finally, the Y component (height) is removed to project the head position onto the ground plane, resulting in a 2D feature.</p>"},{"location":"advanced/tags/","title":"Tags","text":"<p>Tags serve as a robust way to manage unstructured animation data, commonly found in Motion Matching systems. This feature enables you to categorize each animation file using multiple tags and query them in real-time using boolean operations.</p>"},{"location":"advanced/tags/#how-to-add-tags","title":"How to Add Tags","text":"<ol> <li>Navigate to the <code>MotionMatching/Animation Viewer</code> from the top menu to open a new scene along with an accompanying window.</li> <li>Reference your Animation Data within this window.</li> <li>A stick-like character appears to help you visualize the animation effectively.</li> <li>Click on the <code>New Tag</code> button to add a new tag.</li> </ol> Animation with three tags and multiple ranges each. The green query tool is set to `walk | idle`.  <p>Use double left-click on the timeline to add a new tag range. To delete a range, right-click and select the relevant option. Once you're done, click the <code>Return</code> button on the top-left to change to the previous scene.</p>"},{"location":"advanced/tags/#querying-tags-at-runtime","title":"Querying Tags at Runtime","text":""},{"location":"advanced/tags/#single-tag-queries","title":"Single Tag Queries","text":"<p>The <code>MotionMatchingController</code> component exposes methods to enable or disable tags during the search. To search for a specific tag, use <code>SetQueryTag(string name)</code>. To disable all tags and search the entire database, use <code>DisableQueryTag()</code>.</p> <p>Warning</p> <p>Minimize calling <code>DisableQueryTag()</code>, <code>SetQueryTag(string name)</code> or other query methods every frame to maintain optimal performance.</p>"},{"location":"advanced/tags/#boolean-expression-queries","title":"Boolean Expression Queries","text":"<p>The system supports complex boolean queries for tags, enabling a variety of operations:</p> <ul> <li>Intersection (&amp;): Includes poses in both tags (e.g., <code>happy &amp; walk</code>).</li> <li>Union (|): Includes poses in either of the tags (e.g., <code>walk | run</code>).</li> <li>Difference (-): Excludes poses in the second tag (e.g., <code>walk - happy</code>).</li> <li>Parenthesis: Alters operation precedence (e.g., <code>((walk | run) &amp; male) - sad</code>).</li> </ul> <p>To use boolean queries, utilize the <code>class QueryTag</code>. Use <code>bool QueryTag.Parse(string expression, out QueryTag query)</code> for parsing and <code>SetExpression(QueryTag query)</code> to apply it in the <code>MotionMatchingController</code> component. For efficiency, consider parsing and caching the query tags at the beginning of your script.</p> <p>Example</p> <p>See the sample for an in-depth guide on querying tags.</p> <p>Tip</p> <p>The <code>TagSwitchHelper</code> component simplifies using boolean queries. Add it to the same GameObject that contains the <code>CharacterController</code>. You can alter the query using <code>SetExpression(string expression)</code> or disable it with <code>DisableQuery()</code>. Feel free to manipulate the expression directly in the component inspector or through scripting.</p> <p>Use the preview query tool in the <code>Animation Viewer</code> to simulate the result of a complex query.</p>"},{"location":"advanced/unity_animator/","title":"Unity Animator Integration","text":"<p>The package provides a seamless way to integrate Unity's built-in animation system with Motion Matching. This allows you to blend between the poses produced by Unity's <code>Animator</code> component and those generated by Motion Matching.</p> <p>Example</p> <p>Refer to the sample for a hands-on guide on integrating Motion Matching with Unity's <code>Animator</code> component.</p>"},{"location":"advanced/unity_animator/#overview","title":"Overview","text":"<p>The <code>Animator</code> component in Unity allows for a complex arrangement of animation clips, transitions, and layers. Since the <code>Animator</code> is not easily extendable, this project processes poses separately. The <code>MotionMatchingSkinnedMeshRenderer</code> component bridges the two systems by offering an easy way to blend and mask joints.</p>"},{"location":"advanced/unity_animator/#animator-integration-options","title":"Animator Integration Options","text":"<p>In the <code>MotionMatchingSkinnedMeshRenderer</code> component, you'll find an Animator Integration section with the following fields:</p> Field Description Avatar Mask Specifies which of Unity's humanoid joints will be animated by the Motion Matching system. Set to none to animate all joints. Root Positions Mask If enabled, Motion Matching will handle character movement. Root Rotations Mask If enabled, Motion Matching will handle character rotation. Blend Poses Activate this to enable inertialize blending, mitigating abrupt pose changes. Blend Half Life Adjust this to change the blending speed. Represents the time needed to cover half the distance from the source to the target pose. <p>Any change in settings, like modifying the Avatar Mask, will trigger an automatic blending using custom inertialization.</p> <p>Tip</p> <p>Feel free to exchange the Avatar Mask in the <code>MotionMatchingSkinnedMeshRenderer</code> component at runtime. Poses will automatically blend according to your new settings.</p>"},{"location":"advanced/unity_animator/#creating-an-avatar-mask","title":"Creating an Avatar Mask","text":"<p>To create an Avatar Mask:</p> <ol> <li>Right-click in the Unity Project window.</li> <li>Select <code>Create/MotionMatching/AvatarMaskData</code>.</li> </ol>"},{"location":"basics/animation_database/","title":"Creating an Animation Database (MMData)","text":""},{"location":"basics/animation_database/#introduction","title":"Introduction","text":"<p>Animation databases hold the animation sets that the Motion Matching system utilizes to animate characters. These are specified via a scriptable object known as <code>MotionMatchingData</code> (MMData). To view an example, navigate to <code>Animations/MMData/JLData.asset</code>.</p> <p></p>"},{"location":"basics/animation_database/#steps-to-create-an-mmdata-asset","title":"Steps to Create an MMData asset","text":""},{"location":"basics/animation_database/#add-animation-files","title":"Add Animation Files","text":"<ul> <li>Import one or more .bvh files into your project. Change their extensions to .txt so Unity will recognize them as Text Assets.</li> </ul>"},{"location":"basics/animation_database/#create-animationdata","title":"Create AnimationData","text":"<ul> <li>Right-click in the Project window and choose <code>Create/MotionMatching/AnimationData</code>. Link this with the Text Asset from step 1. This AnimationData holds metadata like animation tags.</li> </ul>"},{"location":"basics/animation_database/#create-motionmatchingdata-mmdata","title":"Create MotionMatchingData (MMData)","text":"<ul> <li> <p>Right-click in the Project window and go to <code>Create/MotionMatching/MotionMatchingData</code>.</p> <p>Tip</p> <p>You can duplicate the existing MMData at <code>Animations/MMData/JLData.asset</code> and use it as a starting point.</p> </li> <li> <p>Click Add Animation and link it to the AnimationData file. In the subsequent field labeled Animation with T-Pose, reference an AnimationData where the first frame shows the character in a T-Pose. Note that all .bvh files should have the same skeletal structure.</p> </li> </ul>"},{"location":"basics/animation_database/#configure-skeleton","title":"Configure Skeleton","text":"<ul> <li> <p>Identify the world space coordinates of the hips/root joint local forward and up vectors of your .bvh skeleton. You can use the <code>Auto-Set Hips Vectors</code> button to automatically set these vectors based on the orientation of the character. First, click this button, then you will be redirected to a scene with the skeleton in your T-Pose .bvh file. You can then rotate the character so its forward and up vectors align with the world space axes. Once you are satisfied with the orientation, click the <code>Set Hips Local Vectors</code> button to save the orientation. For example, in the following image, the character has been rotated to face the forward world axis. The final forward hips local vector is (0, 0, -1) and the up local vector is (0, 1, 0):</p> <p></p> <p>Note</p> <p>You can click <code>Set Hips Local Vectors</code> to automatically save the local vectors. However, if you want to check it manually, ensure your Gizmo handle position toggle is set to local space. More Info.</p> <p>The local forward and up vectors should correspond to the hips/root of the skeleton in the .bvh file, not your virtual character used for rendering in Unity.</p> </li> <li> <p>The Contact Velocity Threshold is used for determining foot contact points for the foot lock feature. You can leave this setting as is for now.</p> </li> <li> <p>Click Read Skeleton from BVH to open the Skeleton to Mecanim dropdown. This maps the .bvh skeletal structure to Unity's animation system. Some bones may auto-map based on their names; however, ensure all mappings are accurate. If a bone doesn't correspond to any in Unity, set it as Last Bone to ignore it.</p> <p></p> </li> </ul>"},{"location":"basics/animation_database/#feature-selection","title":"Feature Selection","text":"<ul> <li>Expand the Feature Selector section to choose trajectory and pose features. This package offers fully customizable features, but modifying trajectory features might require code changes. For initial testing, you can copy the settings from <code>Animations/MMData/JLData.asset</code>.</li> </ul>"},{"location":"basics/animation_database/#generate-database","title":"Generate Database","text":"<ul> <li>Click Generate Databases. This action will create the processed pose and feature databases under the <code>StreamingAssets/MMDatabases</code> directory.</li> </ul> <p>Congratulations! You've successfully created an MMData file for your Motion Matching system. Feel free to experiment with these settings to best suit your project's requirements.</p>"},{"location":"basics/character/","title":"Animating a Character with Motion Matching","text":""},{"location":"basics/character/#overview","title":"Overview","text":"<p>Animating a character using Motion Matching involves coordinating between the Character Controller and the Motion Matching controller. While the Character Controller takes user input to generate trajectories and features, the Motion Matching controller manages the databases, motion matching search, and pose post-processing. Lastly, the system retargets the calculated skeleton to Unity's rendering system, as this project does not use Unity's native animation system for Motion Matching.</p>"},{"location":"basics/character/#steps-for-animation","title":"Steps for Animation","text":""},{"location":"basics/character/#create-animation-database","title":"Create Animation Database","text":"<ul> <li> <p>First, generate an animation database (MMData) by following the previous section on creating MMData.</p> <p>Tip</p> <p>You can use the demo scene at <code>Scenes/00_Basic/ExampleSimpleMMController.unity</code> as a template.</p> </li> </ul>"},{"location":"basics/character/#add-character-controller","title":"Add Character Controller","text":"<ul> <li>Create an empty GameObject and attach a Character Controller component to it. Make sure to reference the <code>MotionMatchingController</code> (to be created in step 3) in the Motion Matching field. Keep the feature names unchanged unless you've also modified them in your custom MMData.</li> </ul>"},{"location":"basics/character/#add-motion-matching-controller","title":"Add Motion Matching Controller","text":"<ul> <li>Create another empty GameObject and attach a <code>MotionMatchingController</code> component to it. Reference the Character Controller from step 2 and the MMData file you've prepared.</li> </ul>"},{"location":"basics/character/#add-avatar-and-renderer","title":"Add Avatar and Renderer","text":"<ul> <li>Insert an avatar into the scene. As a reference, you can use <code>Assets/Models/Joe/Joe.prefab</code>, which should be imported as a humanoid. Attach a <code>MotionMatchingSkinnedMeshRenderer</code> component to the avatar and reference the <code>MotionMatchingController</code> from step 3.</li> </ul>"},{"location":"basics/character/#test-animation","title":"Test Animation","text":"<ul> <li>Click on the Play button in Unity to see your animated character in action!</li> </ul> <p>By following these steps, you should now have a functioning Motion Matching animated character.</p>"},{"location":"basics/character_controller/","title":"Character Controller","text":"<p>Character controllers are components that control the character's movement. They are responsible for defining the trajectory of a character to a specific target. The character controller usually receives the input from the user or a path/spline and translates it into trajectories.</p> <p>Warning</p> <p>We are currently working on simplifying the definition of new character controllers. We will update the documentation when ready. However, feel free to read how <code>SpringCharacterController</code>, <code>PathCharacterController</code> and <code>SplineCharacterController</code> components are implemented.</p> <p>Tip</p> <p>When fine-control is not needed. You can use the <code>SimpleMMController</code> component to control the character. This component is a wrapper around the <code>CharacterController</code> and <code>MotionMatchingController</code> components. It provides a simple interface to control the character's movement. Visit the Simple MM Controller page for more information.</p>"},{"location":"basics/using_simple_motion_matching_controller/","title":"Using the Simple MM Controller","text":"<p>We provide a fast way to start using this package when no advanced configuration is needed and you wish to control Motion Matching by script. You can quickly get an animated avatar by using the <code>SimpleMMController</code> script.</p> <p>Example</p> <p>To explore an example scene, access the Package Manager, select the Motion Matching package, and import the Examples sample. The sample scene will be located at <code>Samples/Motion Matching/[version]/Examples/Scenes/00_Basic/ExampleSimpleMMController.unity</code>.</p> <p>Getting Started:</p> <ol> <li>Import the Samples: Import the package's example samples through the Package Manager.</li> <li> <p>Add the Prefab: Drag and drop the <code>Samples/Motion Matching/[version]/Examples/Assets/Prefabs/SimpleMMController</code> prefab into your scene.</p> <p>This prefab contains the following components on its GameObjects:</p> <ul> <li>Root GameObject: <code>SimpleMMController</code> script (the main interface for controlling the character).</li> <li>Child GameObjects: Contain a <code>CharacterController</code>, a <code>MotionMatchingController</code>, and the animated avatar.</li> </ul> </li> <li> <p>Script Interaction: Obtain a reference to the <code>SimpleMMController</code> script from your custom script.</p> </li> <li>Control Velocity: Use the <code>SetVelocity(Vector2 velocity)</code> public function to set the desired direction and speed of the avatar's movement. The <code>Vector2</code> input represents the velocity in the horizontal plane (X and Z axes).</li> </ol>"},{"location":"basics/using_splines/","title":"Using Splines to drive Motion Matching","text":"<p>It is also possible to drive Motion Matching using splines. This method allows you to create more complex and dynamic paths for your characters to follow. The <code>SplineCharacterController</code> script is provided to help you achieve this.</p> <p>Example</p> <p>To explore an example scene, access the Package Manager, select the Motion Matching package, and import the Examples sample. The sample scene will be located at <code>Samples/Motion Matching/[version]/Examples/Scenes/00_Basic/ExampleSplines.unity</code>.</p> <p>Getting Started:</p> <ol> <li>Add the <code>SplineCharacterController</code> script to a GameObject.</li> <li> <p>Create a spline using the <code>Spline</code> component. Visit the Spline documentation for more information.</p> <p>Tip</p> <p>Splines can be modified at runtime to create dynamic paths for your characters to follow.</p> </li> <li> <p>Assign the spline to the <code>SplineCharacterController</code> script.</p> </li> <li>Assign a <code>MotionMatchingController</code> to the <code>SplineCharacterController</code> script.</li> <li>Control the character's velocity by setting the <code>Speed</code> property of the <code>SplineCharacterController</code> script.</li> </ol> <p>Note</p> <p>Feel free to modify the <code>SplineCharacterController</code> script to suit your needs. For example, you can add a method to set the character's speed based on the distance to the next waypoint.</p> <p></p>"},{"location":"reference/todo/","title":"Under Construction","text":"<p>Note</p> <p>Fields and public methods from all Motion Matching components will be described here. This section is under construction.</p>"},{"location":"samples/advanced/path/","title":"Path Character Controller Sample","text":"<p>Info</p> <p>To access this sample, go to the Package Manager, select the Motion Matching package, and then navigate to Samples &gt; Examples to click on Import.</p> <p>You can find this sample located at <code>Examples/Scenes/01_Advanced/ExamplePathTest.unity</code>.</p> <p>This sample differs from the third person character controller in that it incorporates three GameObjects\u2014<code>Test1</code>, <code>Test2</code>, and <code>Test3</code>\u2014each containing all the required components to make a character follow a predefined path.</p>"},{"location":"samples/advanced/path/#key-components","title":"Key Components","text":""},{"location":"samples/advanced/path/#pathcharactercontroller","title":"PathCharacterController","text":"<p>This component allows you to define simple paths that characters will follow within the scene. Similar to the <code>SpringCharacterController</code>, it updates query trajectory features based on the path and sends them to the <code>MotionMatchingController</code>.</p>"},{"location":"samples/advanced/path/#motionmatchingcontroller","title":"MotionMatchingController","text":"<p>This is the primary component responsible for executing the Motion Matching algorithm. It should be added to a separate GameObject.</p>"},{"location":"samples/advanced/path/#joe","title":"Joe","text":"<p>This GameObject is the character to be animated. It contains a <code>MotionMatchingSkinnedMeshRenderer</code> component that retargets the animations to Unity's built-in animation system.</p>"},{"location":"samples/advanced/path/#how-to-play","title":"How to Play","text":"<p>Press play to see the characters follow the paths based on their target velocities, as specified in the <code>PathCharacterController</code>.</p>"},{"location":"samples/advanced/tags/","title":"Tags Sample","text":"<p>Info</p> <p>To import the sample, go to the Package Manager, select Motion Matching, and then navigate to Samples &gt; Examples. Click on Import.</p> <p>This sample is located at <code>Examples/Scenes/01_Advanced/ExampleTags.unity</code>. It builds upon the third person character controller example, incorporating the <code>TagSwitchHelper</code> component to demonstrate the usage of tags in Motion Matching.</p>"},{"location":"samples/advanced/tags/#key-changes","title":"Key Changes","text":"<ul> <li>The <code>TagSwitchHelper</code> component is attached to the <code>CharacterController</code>. This component allows the user to input both simple and complex tag queries. By default, the query expression is set to <code>walk</code>.</li> </ul>"},{"location":"samples/advanced/tags/#how-to-play","title":"How to Play","text":"<p>Press the play button to start the scene. Initially, the character will only be able to walk. To toggle the tag query on or off, press T on the keyboard or A on an Xbox controller. When the query is disabled, the character will be free to utilize the full range of animations in the database, allowing it to walk or run. To restrict the character to an idle state, change the query expression to <code>idle</code>. If query expressions are not enabled, press T to enable them, and the character will not be able to move</p> <p>Note</p> <p>For a comprehensive guide on how tags work in conjunction with Motion Matching, please refer to this section.</p>"},{"location":"samples/advanced/third_person/","title":"Third Person Character Controller Sample","text":"<p>Info</p> <p>To access this sample, first open the Package Manager, select Motion Matching, and then import the examples by navigating to Samples &gt; Examples and clicking Import.</p> <p>The sample can be located at <code>Examples/Scenes/01_Advanced/ExampleThirdPerson.unity</code>. This sample showcases human locomotion animated using the Motion Matching system. It is designed to work with Unity's new action-based Input System and is compatible with both keyboard and Xbox controllers.</p>"},{"location":"samples/advanced/third_person/#key-components","title":"Key Components","text":""},{"location":"samples/advanced/third_person/#charactercontroller","title":"CharacterController","text":"<p>Info</p> <p>For more information about spring-based character controllers, refer to this article by Daniel Holden.</p> <p>This component manages user input and utilizes the <code>SpringCharacterController</code> to predict the character's movement. It is responsible for generating the query trajectory features that are passed to the <code>MotionMatchingController</code>.</p> Tip <p>If you find that Motion Matching isn't precisely following the Character Controller's trajectory, consider enabling the <code>Do Clamping</code> option within the <code>SpringCharacterController</code>. This will enforce a maximum deviation limit but may result in some foot sliding.</p>"},{"location":"samples/advanced/third_person/#motionmatchingcontroller","title":"MotionMatchingController","text":"<p>This component performs the actual Motion Matching and should be placed in a separate GameObject.</p>"},{"location":"samples/advanced/third_person/#joe","title":"Joe","text":"<p>This GameObject represents the character you want to animate. It includes a <code>MotionMatchingSkinnedMeshRenderer</code> component for retargeting to Unity's animation system.</p>"},{"location":"samples/advanced/third_person/#how-to-play","title":"How to Play","text":"<p>After pressing play, use the WASD keys or the left joystick on your Xbox controller to move the character. We recommend using an Xbox controller to fully experience the capabilities of Motion Matching, which can adapt to varying speeds and rotational angles.</p> <p>Press F on the keyboard or the Y button on your Xbox controller to lock the character's orientation.</p> <p>When Gizmos are enabled, the position of the Character Controller will appear in orange, and the predicted future positions will be displayed in light purple.</p>"},{"location":"samples/advanced/unity_animation/","title":"Unity Animator Integration Sample","text":"<p>Info</p> <p>To import this sample, navigate to the Package Manager, select Motion Matching, and then go to Samples &gt; Examples and click on Import.</p> <p>You can find this sample at <code>Examples/Scenes/01_Advanced/ExampleUnityAnimationIntegration.unity</code>. This sample serves as an extension of the third person character controller by integrating it with Unity's <code>Animator</code> component.</p>"},{"location":"samples/advanced/unity_animation/#key-changes","title":"Key Changes","text":"<ul> <li>The <code>Animator</code> component in the <code>Joe</code> GameObject is configured with an animator controller that includes a single animation clip.</li> <li>The <code>MotionMatchingSkinnedMeshRenderer</code> component in <code>Joe</code> specifies a custom Avatar Mask. This mask informs the Motion Matching system that only the joints in the lower body should be animated.</li> </ul>"},{"location":"samples/advanced/unity_animation/#how-to-play","title":"How to Play","text":"<p>Press play to see how the <code>Animator</code> component animates the upper body of the character, while Motion Matching takes care of the lower body and locomotion. You can also remove the reference to the Avatar Mask to see how the system automatically blends into a full-body Motion Matching pose.</p> <p>Note</p> <p>For a comprehensive understanding of how Unity's animation system and Motion Matching are integrated, please refer to this section.</p>"},{"location":"samples/basic/simple_motion_matching_controller/","title":"Simple Motion Matching Controller Sample","text":"<p>Info</p> <p>To access this sample, first open the Package Manager, select Motion Matching, and then import the examples by navigating to Samples &gt; Examples and clicking Import.</p> <p>The sample can be located at <code>Examples/Scenes/00_Basic/ExampleSimpleMMController.unity</code>. This sample showcases how to use a <code>SimpleMMController</code> to drive a character using Motion Matching with a custom script. You will find in the scene's hierarchy two GameObjects that can be enabled and disabled to control whether the character's trajectory is computed randomly or using the Keyboard ASWD keys. Take a look at these scripts and the <code>SimpleMMController</code> to understand how to use Motion Matching in your project.</p> <p>Note</p> <p>See SimpleMMController for more information on how to use the <code>SimpleMMController</code>.</p>"},{"location":"samples/basic/splines/","title":"Splines Sample","text":"<p>Info</p> <p>To access this sample, first open the Package Manager, select Motion Matching, and then import the examples by navigating to Samples &gt; Examples and clicking Import.</p> <p>The sample can be located at <code>Examples/Scenes/00_Basic/ExampleSplines.unity</code>. This sample showcases how to use Splines to drive a character using Motion Matching. You will find in the scene's hierarchy four example GameObjects with all necessary scripts to use Splines with Motion Matching. </p> <p>Note</p> <p>See Splines for more information.</p>"}]}